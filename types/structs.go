// This file is automatically generated. DO NOT EDIT.

package types

import "encoding/xml"

type And struct {
	Not      []Not      `xml:"not,omitempty"`
	Varequal []Varequal `xml:"varequal,omitempty"`
}

type Assessment struct {
	Ident       string      `xml:"ident,attr"`
	Title       string      `xml:"title,attr"`
	Qtimetadata Qtimetadata `xml:"qtimetadata"`
	Section     Section     `xml:"section"`
}

type Assignment struct {
	XMLName           xml.Name          `xml:"assignment"`
	Identifier        string            `xml:"identifier,attr"`
	SchemaLocation    string            `xml:"schemaLocation,attr"`
	Xmlns             string            `xml:"xmlns,attr"`
	Xsi               string            `xml:"xsi,attr"`
	Gradable          Gradable          `xml:"gradable,omitempty"`
	SubmissionFormats SubmissionFormats `xml:"submission_formats,omitempty"`
	Text              Text              `xml:"text,omitempty"`
	Title             Title             `xml:"title,omitempty"`
}

type Attachment struct {
	Href string `xml:"href,attr"`
}

type Attachments struct {
	Attachment []Attachment `xml:"attachment"`
}

type CartridgeBasicltiLink struct {
	XMLName         xml.Name        `xml:"cartridge_basiclti_link"`
	Blti            string          `xml:"blti,attr"`
	Lticm           string          `xml:"lticm,attr"`
	Lticp           string          `xml:"lticp,attr"`
	SchemaLocation  string          `xml:"schemaLocation,attr"`
	Xmlns           string          `xml:"xmlns,attr"`
	Xsi             string          `xml:"xsi,attr"`
	CartridgeBundle CartridgeBundle `xml:"cartridge_bundle,omitempty"`
	CartridgeIcon   CartridgeIcon   `xml:"cartridge_icon,omitempty"`
	Custom          Custom          `xml:"custom,omitempty"`
	Description     Description     `xml:"description,omitempty"`
	Extensions      Extensions      `xml:"extensions,omitempty"`
	Icon            string          `xml:"icon,omitempty"`
	LaunchUrl       string          `xml:"launch_url,omitempty"`
	SecureIcon      string          `xml:"secure_icon,omitempty"`
	SecureLaunchUrl string          `xml:"secure_launch_url,omitempty"`
	Title           Title           `xml:"title,omitempty"`
	Vendor          Vendor          `xml:"vendor,omitempty"`
}

type CartridgeBundle struct {
	Identifierref string `xml:"identifierref,attr"`
}

type CartridgeIcon struct {
	Identifierref string `xml:"identifierref,attr,omitempty"`
}

type Conditionvar struct {
	And      And      `xml:"and,omitempty"`
	Other    struct{} `xml:"other,omitempty"`
	Varequal Varequal `xml:"varequal,omitempty"`
}

type Contact struct {
	Email string `xml:"email,omitempty"`
}

type Contribute struct {
	Date   Date   `xml:"date,omitempty"`
	Entity Entity `xml:"entity,omitempty"`
	Role   Role   `xml:"role,omitempty"`
}

type CopyrightAndOtherRestrictions struct {
	Value string `xml:"value,omitempty"`
}

type Custom struct {
	Property Property `xml:"property,omitempty"`
}

type Date struct {
	DateTime string `xml:"dateTime,omitempty"`
}

type Decvar struct {
	Maxvalue string `xml:"maxvalue,attr,omitempty"`
	Minvalue string `xml:"minvalue,attr,omitempty"`
	Varname  string `xml:"varname,attr,omitempty"`
	Vartype  string `xml:"vartype,attr,omitempty"`
}

type Dependency struct {
	Identifierref string `xml:"identifierref,attr,omitempty"`
}

type Description struct {
	Text   string `xml:",chardata"`
	String String `xml:"string,omitempty"`
}

type Displayfeedback struct {
	Feedbacktype string `xml:"feedbacktype,attr,omitempty"`
	Linkrefid    string `xml:"linkrefid,attr,omitempty"`
}

type Educational struct {
	IntendedEndUserRole IntendedEndUserRole `xml:"intendedEndUserRole,omitempty"`
}

type Entity struct {
	String String `xml:"string,omitempty"`
}

type Extensions struct {
	Platform string   `xml:"platform,attr,omitempty"`
	Property Property `xml:"property,omitempty"`
}

type File struct {
	Href string `xml:"href,attr"`
}

type FlowMat struct {
	Material Material `xml:"material,omitempty"`
}

type Format struct {
	Type string `xml:"type,attr"`
}

type General struct {
	Description Description `xml:"description,omitempty"`
	Keyword     Keyword     `xml:"keyword,omitempty"`
	Language    string      `xml:"language,omitempty"`
	Structure   Structure   `xml:"structure,omitempty"`
	Title       Title       `xml:"title,omitempty"`
}

type Gradable struct {
	PointsPossible string `xml:"points_possible,attr"`
	Text           string `xml:",chardata"`
}

type IntendedEndUserRole struct {
	Source string `xml:"source,omitempty"`
	Value  string `xml:"value,omitempty"`
}

type Item struct {
	XMLName        xml.Name       `xml:"item"`
	Ident          string         `xml:"ident,attr,omitempty"`
	Identifier     string         `xml:"identifier,attr,omitempty"`
	Identifierref  string         `xml:"identifierref,attr,omitempty"`
	TitleAttribute string         `xml:"title,attr,omitempty"`
	Item           []Item         `xml:"item"`
	Itemfeedback   []Itemfeedback `xml:"itemfeedback"`
	Itemmetadata   Itemmetadata   `xml:"itemmetadata,omitempty"`
	Metadata       Metadata       `xml:"metadata,omitempty"`
	Presentation   Presentation   `xml:"presentation,omitempty"`
	Resprocessing  Resprocessing  `xml:"resprocessing,omitempty"`
	Title          Title          `xml:"title,omitempty"`
}

type Itemfeedback struct {
	Ident   string  `xml:"ident,attr"`
	FlowMat FlowMat `xml:"flow_mat,omitempty"`
}

type Itemmetadata struct {
	Qtimetadata Qtimetadata `xml:"qtimetadata,omitempty"`
}

type Keyword struct {
	String String `xml:"string,omitempty"`
}

type LifeCycle struct {
	Contribute Contribute `xml:"contribute,omitempty"`
}

type Lom struct {
	Educational Educational `xml:"educational,omitempty"`
	General     General     `xml:"general,omitempty"`
	LifeCycle   LifeCycle   `xml:"lifeCycle,omitempty"`
	Rights      Rights      `xml:"rights,omitempty"`
}

type Manifest struct {
	XMLName        xml.Name      `xml:"manifest"`
	Identifier     string        `xml:"identifier,attr"`
	Lom            string        `xml:"xmlns:lom,attr"`
	Lomimscc       string        `xml:"xmlns:lomimscc,attr"`
	SchemaLocation string        `xml:"schemaLocation,attr"`
	Xmlns          string        `xml:"xmlns,attr"`
	Xsi            string        `xml:"xmlns:xsi,attr"`
	Metadata       Metadata      `xml:"metadata"`
	Organizations  Organizations `xml:"organizations"`
	Resources      Resources     `xml:"resources"`
}

type Material struct {
	Mattext Mattext `xml:"mattext,omitempty"`
}

type Mattext struct {
	Texttype string `xml:"texttype,attr"`
	Text     string `xml:",chardata"`
}

type Metadata struct {
	Lom           Lom    `xml:"lom,omitempty"`
	Schema        string `xml:"schema"`
	Schemaversion string `xml:"schemaversion"`
}

type Not struct {
	Varequal Varequal `xml:"varequal,omitempty"`
}

type Organization struct {
	Identifier string `xml:"identifier,attr,omitempty"`
	Structure  string `xml:"structure,attr,omitempty"`
	Item       Item   `xml:"item,omitempty"`
}

type Organizations struct {
	Organization Organization `xml:"organization,omitempty"`
}

type Outcomes struct {
	Decvar Decvar `xml:"decvar,omitempty"`
}

type Presentation struct {
	Material    Material    `xml:"material,omitempty"`
	ResponseLid ResponseLid `xml:"response_lid,omitempty"`
	ResponseStr ResponseStr `xml:"response_str,omitempty"`
}

type Property struct {
	Name string `xml:"name,attr"`
	Text string `xml:",chardata"`
}

type Qtimetadata struct {
	Qtimetadatafield []Qtimetadatafield `xml:"qtimetadatafield"`
}

type Qtimetadatafield struct {
	Fieldentry string `xml:"fieldentry,omitempty"`
	Fieldlabel string `xml:"fieldlabel,omitempty"`
}

type Questestinterop struct {
	XMLName        xml.Name   `xml:"questestinterop"`
	SchemaLocation string     `xml:"schemaLocation,attr"`
	Xmlns          string     `xml:"xmlns,attr"`
	Xsi            string     `xml:"xsi,attr"`
	Assessment     Assessment `xml:"assessment,omitempty"`
}

type RenderChoice struct {
	ResponseLabel []ResponseLabel `xml:"response_label"`
}

type RenderFib struct {
	ResponseLabel ResponseLabel `xml:"response_label,omitempty"`
}

type Resource struct {
	XMLName     xml.Name     `xml:"resource"`
	Href        string       `xml:"href,attr,omitempty"`
	Identifier  string       `xml:"identifier,attr"`
	Intendeduse string       `xml:"intendeduse,attr,omitempty"`
	Type        string       `xml:"type,attr,omitempty"`
	Dependency  []Dependency `xml:"dependency"`
	File        []File       `xml:"file"`
	Metadata    Metadata     `xml:"metadata,omitempty"`
	Variant     Variant      `xml:"variant,omitempty"`
}

type Resources struct {
	Resource []Resource `xml:"resource"`
}

type Respcondition struct {
	Continue        string          `xml:"continue,attr,omitempty"`
	Conditionvar    Conditionvar    `xml:"conditionvar,omitempty"`
	Displayfeedback Displayfeedback `xml:"displayfeedback,omitempty"`
	Setvar          Setvar          `xml:"setvar,omitempty"`
}

type ResponseLabel struct {
	Ident    string   `xml:"ident,attr,omitempty"`
	Rshuffle string   `xml:"rshuffle,attr,omitempty"`
	Material Material `xml:"material,omitempty"`
}

type ResponseLid struct {
	Ident        string       `xml:"ident,attr,omitempty"`
	Rcardinality string       `xml:"rcardinality,attr,omitempty"`
	RenderChoice RenderChoice `xml:"render_choice,omitempty"`
}

type ResponseStr struct {
	Ident        string    `xml:"ident,attr"`
	Rcardinality string    `xml:"rcardinality,attr,omitempty"`
	RenderFib    RenderFib `xml:"render_fib,omitempty"`
}

type Resprocessing struct {
	Outcomes      Outcomes        `xml:"outcomes,omitempty"`
	Respcondition []Respcondition `xml:"respcondition"`
}

type Rights struct {
	CopyrightAndOtherRestrictions CopyrightAndOtherRestrictions `xml:"copyrightAndOtherRestrictions,omitempty"`
	Description                   Description                   `xml:"description,omitempty"`
}

type Role struct {
	String String `xml:"string,omitempty"`
}

type Section struct {
	Ident string `xml:"ident,attr"`
	Item  []Item `xml:"item"`
}

type Setvar struct {
	Action  string `xml:"action,attr,omitempty"`
	Varname string `xml:"varname,attr,omitempty"`
	Text    string `xml:",chardata"`
}

type String struct {
	Language string `xml:"language,attr,omitempty"`
	Text     string `xml:",chardata"`
}

type Structure struct {
	Source string `xml:"source,omitempty"`
	Value  string `xml:"value,omitempty"`
}

type SubmissionFormats struct {
	Format []Format `xml:"format"`
}

type Text struct {
	Texttype string `xml:"texttype,attr,omitempty"`
	Text     string `xml:",chardata"`
}

type Title struct {
	Text   string `xml:",chardata"`
	String String `xml:"string,omitempty"`
}

type Topic struct {
	XMLName        xml.Name    `xml:"topic"`
	SchemaLocation string      `xml:"schemaLocation,attr"`
	Xmlns          string      `xml:"xmlns,attr"`
	Xsi            string      `xml:"xsi,attr"`
	Attachments    Attachments `xml:"attachments,omitempty"`
	Text           Text        `xml:"text,omitempty"`
	Title          Title       `xml:"title,omitempty"`
}

type Url struct {
	Href           string `xml:"href,attr,omitempty"`
	Target         string `xml:"target,attr,omitempty"`
	WindowFeatures string `xml:"windowFeatures,attr,omitempty"`
	Text           string `xml:",chardata"`
}

type Varequal struct {
	Respident string `xml:"respident,attr,omitempty"`
	Text      string `xml:",chardata"`
}

type Variant struct {
	Identifier    string   `xml:"identifier,attr,omitempty"`
	Identifierref string   `xml:"identifierref,attr,omitempty"`
	Metadata      Metadata `xml:"metadata,omitempty"`
}

type Vendor struct {
	Code        string      `xml:"code,omitempty"`
	Contact     Contact     `xml:"contact,omitempty"`
	Description Description `xml:"description,omitempty"`
	Name        string      `xml:"name,omitempty"`
	Url         Url         `xml:"url,omitempty"`
}

type WebLink struct {
	XMLName        xml.Name `xml:"webLink"`
	SchemaLocation string   `xml:"schemaLocation,attr"`
	Xmlns          string   `xml:"xmlns,attr"`
	Xsi            string   `xml:"xsi,attr"`
	Title          Title    `xml:"title,omitempty"`
	Url            Url      `xml:"url,omitempty"`
}
